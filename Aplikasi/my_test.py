'''
Created on 7 Nov 2017
@author: TA17
'''
import threading
import random
from ctypes import *
import my_debugger
from boyer_moore import boyer_moore
from rabin_karp import rabin_karp
from suffix_trees import STree
import pefile
import time
clib = cdll.msvcrt
debugger = my_debugger.debugger()

def suspend():
    debugger.suspend()

def getAddress(path):
    pe = pefile.PE(path)
    size_of_section = pe.OPTIONAL_HEADER.SizeOfCode
    base_relocation = pe.OPTIONAL_HEADER.ImageBase
    entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    temp = (pe.sections[0].VirtualAddress + base_relocation,size_of_section)
    return temp  


def getFromDatabase():
    file  = open("main.ndb", "r")
    return file



def RK(shellcode,signature):
    p = 101
    temp = ""
    keyword = []
    for i in signature:
        cnt = 0
        for j in range(0,len(i)-1):
            if i[j] == ':':
                cnt+=1
            if cnt == 3 :
                if rabin_karp(i[j+1:].rstrip(),shellcode,p)==1:
                    return 1
                break
    return 0


def BM(shellcode,signature):
    for i in signature:
        cnt = 0
        for j in range(0,len(i)-1):
            if i[j] == ':':
                cnt+=1
            if cnt == 3 :
                if boyer_moore(shellcode,i[j+1:].rstrip()):
                    return 1
                break
    return 0


def ST(shellcode,signature):
    st = STree.STree(shellcode)
    for i in signature:
        cnt = 0
        for j in range(0,len(i)-1):
            if i[j] == ':':
                cnt+=1
            if cnt == 3 :
                temp = st.find(i[j+1:].rstrip())
                if temp !=-1:
  #                  print i
                    return 1
                break
    return 0

def search_clib(shellcode, signature):
    n = 0
    for i in signature:
        cnt = 0
        n+=1
        for j in range(0,len(i)-1):
            if i[j] == ':':
                cnt+=1
            if cnt == 3 :
                ret = clib.strstr(shellcode, i[j+1:].rstrip())
                print ret
                if ret!=0:
                    print "nilai n = ",n
                    return 1
                break
            

def main():
    str = raw_input("Enter the name of your text file - please use / backslash when typing in directory path: ")
    temp = 0
    textSection_size_address = getAddress(str)
    debugger.size_text_section = textSection_size_address[1]
    debugger.address_text_section = textSection_size_address[0]   
  
    input_user = raw_input("1. Timer\n2. Breakpoint\nInput = ")
    res = input_user
    if int(input_user)==1:
        timer = debugger.getTime(str)
        print "Total Runtime PE = ", timer,"\n"
        u_time = int(raw_input("Input Timer(%) = "))
        #if u_time < 50:
        #    print "Input Timer must be greater than 50"
        #    return 0
        timer = timer * u_time / 100
        debugger.load(str)
        t = threading.Timer(timer, suspend)
        t.start()
        debugger.run()
    else:
        point = random.randrange(int(textSection_size_address[1]), int(textSection_size_address[0]) + int(textSection_size_address[1]))
        debugger.load(str)
        debugger.bp_set(point)        
        debugger.run()
    while 1:
        input_user = int(raw_input("Choose Algorithm :\n1. Suffix Tree\n2. Boyer Moore\n3. Rabin Karp\n4. Exit\nInput: "))
        
        text_section_hex = debugger.shellcode.encode("HEX")
        virus_signature = getFromDatabase()
      
        #print text_section_hex
        start_time = time.time()
        
        if input_user==1:
            temp = ST(text_section_hex,virus_signature)
        elif input_user==2:
            temp = BM(text_section_hex,virus_signature)
        elif input_user==3:
            temp = RK(text_section_hex,virus_signature)
        elif input_user==4:
            return 0
        else:
            print "\nMasukan Anda Salah\n"
        
        print "Total RunTime Search = ",time.time() - start_time
        
        if temp==0:
            print "\nInconclusive\n"
        else:
            print "\nMalware\n"

if __name__ == "__main__":
    main()